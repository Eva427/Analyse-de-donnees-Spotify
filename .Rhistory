knitr::opts_chunk$set(echo = TRUE)
library("corrplot")
library("FactoMineR")
library("factoextra")
install.packages("calendR")
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE)
library("corrplot")
library("FactoMineR")
library("factoextra")
library("shape")
library("shape")
install.package"s("shape")
install.packages("shape")
library("corrplot")
library("FactoMineR")
library("factoextra")
library("shape")
library("knitr")
library("kableExtra")
install.packages("kableExtra")
library("corrplot")
library("FactoMineR")
library("factoextra")
library("shape")
library("knitr")
library("kableExtra")
library("ggplot2")
library("paletteer")
install.packages("paletteer")
library("corrplot")
library("FactoMineR")
library("factoextra")
library("shape")
library("knitr")
library("kableExtra")
library("ggplot2")
library("paletteer")
library("colorspace")
library("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library("corrplot")
library("FactoMineR")
library("factoextra")
library("shape")
library("knitr")
library("kableExtra")
library("ggplot2")
library("paletteer")
library("colorspace")
library("ggpubr")
#.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!
spotify <- read.table("spotify-3MIC.txt", header=TRUE)
spotify <- read.table("spotify-3MIC.txt", header=TRUE)
nb_ind = nrow(spotify)
nb_var = ncol(spotify)
knitr::opts_chunk$set(echo = TRUE)
library("corrplot")
library("FactoMineR")
library("factoextra")
library("shape")
library("knitr")
library("kableExtra")
library("ggplot2")
library("paletteer")
library("colorspace")
library("ggpubr")
#.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!
spotify <- read.table("spotify-3MIC.txt", header=TRUE)
nb_ind = nrow(spotify)
nb_var = ncol(spotify)
# Fonction permettant l'affichage des pourcentages dans les pie charts
text_pie = function(vector,labels=c(),cex=1) {
vector = vector/sum(vector)*2*pi; temp = c()
j = 0; l = 0
for (i in 1:length(vector)) {
k = vector[i]/2; j =  j+l+k; l = k
text(cos(j)/2,sin(j)/2,paste(labels[i],"%"),cex = 1)}
vector = temp }
###Variable Explicit
Explicit = factor(x=spotify$explicit, labels=c("NV", "V"))
#nombre de morceaux présentant une vulgarité
nb_Vexplicit = sum(spotify$explicit)
#vecteur pourcentages
pourcent_explicit = c(100*(nb_ind-nb_Vexplicit)/nb_ind, 100*nb_Vexplicit/nb_ind)
###Variable Key
Key = factor(x=spotify$key)
B = table(Key)
table_key = data.frame(Effectif= c(B), Fréquence=c(B)/sum(B), Angle= c(B)/sum(B)*360)
pourcent_key = table_key[,2]*100 #vecteur pourcentages
###Variable Mode
Mode = factor(x=spotify$mode, labels=c("mineur","majeur"))
nb_Majmode = sum(spotify$mode)#nombre de morceaux présentant un mode majeur
#vecteur pourcentages
pourcent_mode = c(100*(nb_ind-nb_Majmode)/nb_ind, 100*nb_Majmode/nb_ind)
layout(matrix(c(1,1,2,3), nrow=2),  widths=c(3,2.5), heights=c(2,2))
### pie chart de la variable key
pie(table(Key), labels=c("A", "Ab", "B", "Bb", "C", "D", "Dd", "E", "Eb", "F" , "G", "Gb"),
main ="Pie chart de la variable key", cex.main = .8, col= rainbow_hcl(12))
text_pie(pourcent_key, strsplit(toString(pourcent_key), ", ")[[1]], cex=0.9)
### pie chart de la variable Explicit
pie(table(Explicit), col=c("#F9E79F", "#FAE5D3"), labels=c("Non  vulgaire", "Vulgaire"),
main="Pie chart de la variable explicit", cex.main =.8)
text_pie(pourcent_explicit, c(pourcent_explicit[1],pourcent_explicit[2]), cex=1.1)#affichage pourcentages
### pie chart de la variable mode
pie(table(Mode), labels=c("Mode mineur", "Mode majeur"), main ="Pie chart de la variable mode",
cex.main = .8, col=c("#F9E79F","#FAE5D3"))
text_pie(pourcent_mode, c(pourcent_mode[1],pourcent_mode[2]), cex=.8) #affichage pourcentages
###prend en argument un vecteur V1 et regroupe les valeurs par plages de "pas" ans.
f_regroup_vecteur <- function (V1,pas) {
nb_Annees = nrow(V1)
year_plage = seq (1,nb_Annees/pas)
j = 1;
for (i in seq(1,(nb_Annees-pas+1),by=pas)) {
year_plage[j] = sum(V1[i:(i+pas-1)])
j = j + 1}
return(year_plage)}
###prend en argument une matrice M1 et regroupe les valeurs par plages de "pas" ans.
f_regroup_matrice <- function (M1,pas) {
nb_colonnes = ncol(M1)
nb_Annees = nrow(M1) #nb_Annees=100 ans
year_plage = matrix(0,ncol=nb_colonnes, nrow=nb_Annees/pas)
for (n in 1:nb_colonnes){
j = 1;
for (i in seq(1,(nb_Annees-pas+1),by=pas)) {
year_plage[j,n] = sum(M1[i:(i+pas-1),n])
j = j + 1} }
return(year_plage) }
#affiche le nom des colonnes d'une matrice ou vecteur regroupées par plages de "pas" ans
f_affiche <- function(M1,a1,a2,pas) {
tabYears1 = seq(a1, 2020, by = pas)
tabYears2 = seq(a2, 2020, by = pas)
abs_names = seq(1, (nrow(M1)/pas))
for (n in 1:(nrow(M1)/pas)){
abs_names[n] = paste(tabYears1[n], tabYears2[n], sep = "-")}
return(abs_names)}
#regroupe les annees en pas ans pour un meilleur affichage du biplot (cf. ACP)
f_year_biplot <- function (V,pas) {
l = length(V) ; V2 = seq(1,l)
for (i in seq(1,l)){nb = V[i]
if (nb%%pas == 0){a = nb-pas+1 ; b = nb}
else {a = (nb%/%pas)*pas + 1 ; b = (nb%/%pas)*pas + pas}
V2[i] = paste(toString(a),toString(b),sep = "-")}
return (V2)}
Year = spotify$year; par(mfrow = c(1,2))
###Variable Year
V = f_regroup_vecteur (table(Year)/nb_ind,10)
abs_names = f_affiche (table(Year),1921,1930,10)
barplot(V, main="Barplot de la variable year", xlab = "", ylab = "Fréquence",
names.arg = abs_names, las=2, cex.names=0.7, cex.main =.8)
###Variable pop.Class
PopClass=spotify$pop.class; fq_pop <- table(PopClass)/nb_ind
barplot(fq_pop, main="Barplot des fréquences de la variable pop.class", xlab =
"Populatité du morceau", ylab = "Fréquence", cex.main =.8)
###Variable acousticness
acousticness = spotify$acousticness
par(mfrow = c(1,2))
A = hist(acousticness,freq = TRUE, ylab = "Effectif", main = "Histogramme de acousticness", cex.main = 1)
boxplot(acousticness, main = "Boxplot de acousticness",cex.main = 1)
summary(acousticness)
Duration = spotify$duration; par(mfrow = c(1,1))
Duration_min = round(Duration/60000, 2) #on affiche en minutes
D = hist(Duration_min,freq = TRUE, ylab = "Effectif", xlab = "Durée du morceau en min",
main = "Histogramme de Duration en minutes", breaks = 20, las = 2,xaxt="n", cex.main = .8)
axis (side = 1, at = seq (floor(min(Duration_min)),ceiling(max(Duration_min)),0.5), las = 2, cex.axis = .8)
text(D$mids,D$counts,labels=(D$counts/100), adj=c(0.5, -0.5), cex = .6)
#boxplot pas pertinent car trop de outliers
sd(Duration)
Energy = spotify$energy; par(mfrow = c(1,2))
E = hist(Energy,freq = TRUE, ylab = "Effectif", xlab = "Energie", breaks = 20, las = 2, xaxt="n",
main = "") ; title(main="Histogramme de Energy",cex.main = .8, line=0)
axis (side = 1, at = seq (floor(min(Energy)),ceiling(max(Energy)),0.05), las = 2,
cex.axis = .8)
boxplot(Energy, main = "Boxplot de Energy",cex.main = .8)
Liveness = spotify$liveness; par(mfrow = c(1,2))
Li = hist(Liveness,freq = TRUE, ylab = "Effectif", xlab = "Liveness", main = "Histogramme de
Liveness", breaks = 10, las = 2, xaxt="n", cex.main = .8)
text(Li$mids,Li$counts,labels=Li$counts, adj=c(0.5, -0.5), cex = .6)
axis (side = 1, at = seq (floor(min(Liveness)),ceiling(max(Liveness)),0.05), las = 2, cex.axis = .8)
boxplot(Liveness, main = "Boxplot de Liveness",cex.main = .8); summary(Liveness)
Loudness = spotify$loudness; par(mfrow = c(1,2))
Lo = hist(Loudness,freq = TRUE, ylab = "Effectif", xlab = "Loudness en dB", main =
"Histogramme de Loudness", breaks = 20, las = 2, xaxt="n", cex.main = .8)
axis (side = 1, at = seq (floor(min(Loudness)),ceiling(max(Loudness)),5), las = 2, cex.axis = .8)
text(Lo$mids,Lo$counts,labels=Lo$counts, adj=c(0.5, -0.5), cex = .6)
boxplot(Loudness, main = "Boxplot de Loudness", cex.main = .8) ; summary(Loudness)
Tempo = spotify$tempo; par(mfrow = c(1,2))
T = hist(Tempo,freq = TRUE, ylab = "Effectif", xlab = "Tempo en battement par minute", main =
"Histogramme de Tempo", breaks = 10, las = 2, xaxt="n", cex.main = 0.8)
axis (side = 1, at = seq (floor(min(Tempo)),ceiling(max(Tempo)),5), las = 2, cex.axis = .8)
boxplot(abs(Tempo), main = "Boxplot de Tempo",cex.main = .8) ; summary(Tempo)
layout(matrix(c(1,1,2,3), nrow=2),  widths=c(1,1), heights=c(2.5,3))
### year et explicit
table.cont = table(Year, Explicit); prop.cont = prop.table(table.cont)
NewTable2 = f_regroup_matrice (table.cont,10)
rownames(NewTable2) <- f_affiche(table.cont,1921,1930,10)
colnames(NewTable2) <- c("vulgaire","non vulgaire")
NewProp2 =  f_regroup_matrice (prop.cont,10)
rownames(NewProp2) <- f_affiche(prop.cont,1921,1930,10)
colnames(NewProp2) <- c("vulgaire","non vulgaire")
mosaicplot(NewTable2, main="Mosaic plot year~explicit",las = 2, cex.axis = 0.9, cex.main = .8)
### mode et explicit
table.cont = table(Mode, Explicit); prop.cont = prop.table(table.cont)
mosaicplot(table.cont, main ="Mosaic plot mode~explicit", cex.main = .8, cex.axis = 0.9)
### popularite et explicit
table.cont = table(PopClass, Explicit); prop.cont = prop.table(table.cont)
mosaicplot(table.cont, main="Mosaic plot explicit~popClass", cex.main = .8, cex.axis = 0.9)
### year et popularité
par(mfrow = c(1,2))
Year = spotify$year
table.cont = table(Year, PopClass); prop.cont = prop.table(table.cont)
NewTable = f_regroup_matrice (table.cont,10)
rownames(NewTable) <- f_affiche(table.cont,1921,1930,10)
colnames(NewTable) <- c("A","B","C","D")
NewProp =  f_regroup_matrice (prop.cont,10)
rownames(NewProp) <- f_affiche(prop.cont,1921,1930,10)
colnames(NewProp) <- c("A","B","C","D")
mosaicplot(NewTable, main="Mosaic plot year~popClass",las = 2, cex.axis = .8, cex.main = .8)
### key et mode
table.cont = table(Mode, Key); prop.cont = prop.table(table.cont)
mosaicplot(table.cont, main="Mosaic plot key~mode", cex.main = .8,cex.axis = 0.9)
correlation=cor(spotify[,c(2,3,4,7,8,10)])
corrplot(correlation, method="ellipse")
par(mfrow = c(1,3))
###energy et loudness
mod = lm(Loudness ~ Energy, data=spotify)
plot(Loudness~Energy, main="Loudness ~ Energy"); abline(mod, col="red")
###acousticness et loudness
mod = lm(Loudness ~ acousticness, data=spotify)
plot(Loudness ~ acousticness, main="Loudness ~ acousticness"); abline(mod, col="red")
###acousticness et energy
mod = lm(Energy ~ acousticness, data=spotify)
plot(Energy ~ acousticness, main="Energy ~ acousticness") ;abline(mod, col="red")
par(mfrow=c(1,3)) ; boxplot(Loudness~PopClass); boxplot(Energy~PopClass); boxplot(acousticness~PopClass)
par(mfrow=c(1,2)) ; V2 = f_year_biplot (spotify$year,10) ; Year2 = factor(x=V2) ;
boxplot(Energy~Year2) ; boxplot(acousticness~Year2)
spotify2=spotify[,-c(1,5,6,9,11)] #pour supprimer les colonnes
write.table(spotify2,file="spotify2.txt",row.names=TRUE,col.names=TRUE)
x <- read.table("spotify2.txt", header=TRUE) #stocke les variables quantitatives
res.acp <- PCA(x,scale.unit=TRUE,ncp=6,graph=FALSE)
eig.val <- get_eigenvalue(res.acp)
p0 = fviz_eig(res.acp, addlabels = TRUE, ylim = c(0, 50))
corrplot(res.acp$var$cor, method="ellipse")
var <- get_pca_var(res.acp)
########Composante 1 contre composante 2########
A = fviz_pca_var(res.acp, col.var = "cos2",repel = TRUE, gradient.cols =
c("#00AFBB","#E7B800","#FC4E07"), axes=c(1,2),labelsize = 3)
########Composante 1 contre composante 3########
B = fviz_pca_var(res.acp, col.var = "cos2",repel = TRUE, gradient.cols =
c("#00AFBB", "#E7B800","#FC4E07"), axes=c(1,3), labelsize = 3)
########Composante 1 contre composante 4########
C = fviz_pca_var(res.acp, col.var = "cos2",repel = TRUE, gradient.cols =
c("#00AFBB", "#E7B800","#FC4E07"), axes=c(1,4), labelsize = 3)
ggarrange(A, B, C + rremove("x.text"), ncol = 2, nrow = 2)
ind <- get_pca_ind(res.acp)
#fviz_pca_ind(res.acp, geom.ind = "point",col.ind="cos2", axes=c(1,2))
#fviz_pca_ind(res.acp, geom.ind = "point",col.ind="cos2", axes=c(1,3))
#fviz_pca_ind(res.acp, geom.ind = "point",col.ind="cos2", axes=c(1,4))
#fviz_pca_ind(res.acp, geom.ind = "point",col.ind="cos2", axes=c(2,3))
#fviz_pca_ind(res.acp, geom.ind = "point",col.ind="cos2", axes=c(2,4))
#fviz_pca_ind(res.acp, geom.ind = "point",col.ind="cos2", axes=c(3,4))
fviz_pca_biplot(res.acp,geom.ind = "point", col.ind = spotify$pop.class, palette = rainbow(4, start=.5,
end=.1), addEllipses = TRUE, legend.title = "Groups", title="Biplot avec la variable pop.Class")
V2 = f_year_biplot (spotify$year,10) ; Year2 = factor(x=V2)
fviz_pca_biplot(res.acp, geom.ind = "point", col.ind = Year2, addEllipses = TRUE, legend.title =
"Groups", palette=rainbow(10, start=.5, end=.1), title="Biplot avec la variable year")
#fviz_contrib(res.acp, choice = "ind", axes = 1:4) #pas très pertinent ? A quoi ça nous sert de savoir la contribution d'un seul morceau en particulier sur la dimension ?
# on s'interesse à la qualité de représentation qui indique si les individus sont bien projettés sur les dimensions.
# seuls les éléments bien projettés peuvent être interprétés.
#round(res.acp$ind$cos2,2) # qualité de projection de chaque individu sur les différentes dimensions
# idée : pour dim1 et dim2 : sommer les valeurs de dim1 et dim2 pour chaque individu puis prendre les n valeurs max. on aura les n individus qui sont le mieux projettés/qui ont la meilleure qualité de représentation et on pourra s'en servir pour l'analyse. Faire pareil avec dim1-dim2, dim1-dim3...
## autre idées :
# ind with cos2 >= 0.99, cos2 représentant la qualité de représentation
#fviz_pca_ind(res.acp,col.ind="cos2", axes=c(1,2),select.ind =list(cos2=0.99), repel = TRUE)
# Top 20 ind according to the cos2: select.ind = list(cos2 = 20)
#fviz_pca_ind(res.acp,col.ind="cos2", axes=c(1,2),select.ind =list(cos2=20), repel = TRUE)
# Top 20 contributing individuals: select.ind = list(contrib = 20)
#fviz_pca_ind(res.acp,col.ind="cos2", axes=c(1,2),select.ind =list(contrib = 20), repel = TRUE)
# doc : https://www.rdocumentation.org/packages/factoextra/versions/1.0.7/topics/fviz_pca
#strsplit(toString(V1), " ")[[1]] #fonction intéressante à garde au cas où
